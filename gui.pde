/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void win_draw1(PApplet appc, GWinData data) { //_CODE_:window1:902045:
  appc.background(230);
} //_CODE_:window1:902045:

public void roomListClick(GDropList source, GEvent event) { //_CODE_:roomList:917343:

  String selectedRoom = roomList.getSelectedText(); // Get the selected room

  if (selectedRoom.equals("Kitchen")) { // Change the second dropdown menu depending on which room
    soundList.setItems(new String[] { "Plate", "Metal Bowl", "Metal Tea Tin", "Metal Drop", "Pot Lid", "Clank"}, 0);
  } else if (selectedRoom.equals("Office Room")) {
    soundList.setItems(new String[] { "Pen Click", "Pencil", "Computer Ping", "Clock", "Keyboard", "Printer" }, 0);
  }
} //_CODE_:roomList:917343:

public void soundListClick(GDropList source, GEvent event) { //_CODE_:soundList:563916:
} //_CODE_:soundList:563916:

public void noteLengthClick(GDropList source, GEvent event) { //_CODE_:noteLength:678203:
  String selected = source.getSelectedText();

  if (selected.equals("Eighth")) { 
    selectedNoteLength = 1;
  } else if (selected.equals("Quarter")) {
    selectedNoteLength = 2;
  } else if (selected.equals("Half")) {
    selectedNoteLength = 4;
  } else if (selected.equals("Whole")) {
    selectedNoteLength = 8;
  }
  
} //_CODE_:noteLength:678203:

public void restclick(GCheckbox source, GEvent event) { //_CODE_:restbutton:975935:
  if (!selectedRest){  
    selectedRest = true;
  } else {
    selectedRest = false;
  }
} //_CODE_:restbutton:975935:

public void PlaySound(GButton source, GEvent event) { //_CODE_:Play:393414:
  isPlaying = true; // Set the variable to true
  currentBeat = 0; // Set/Reset the current beat variable
  lastPlayTime = millis(); // Get the millis
} //_CODE_:Play:393414:

public void TestingSound(GButton source, GEvent event) { //_CODE_:TestSound:221741:
  String selectedSound = soundList.getSelectedText(); // To test a singular sound
  SoundFile sf = soundMap.get(selectedSound); // Get the matching sound to the name selected
  sf.play(); // Play the sound
} //_CODE_:TestSound:221741:

public void SavingSong(GButton source, GEvent event) { //_CODE_:SavedSong:476136:
  saveNotesToFile(); // Call the function
} //_CODE_:SavedSong:476136:

public void LoadSong(GButton source, GEvent event) { //_CODE_:LoadedSong:485788:
  loadNotesFromFile(); // Call the function
} //_CODE_:LoadedSong:485788:

public void ClearSong(GButton source, GEvent event) { //_CODE_:ClearingSong:898325:
  whichNote.clear(); // Clear all notes
  noteColors.clear(); // Clear colors
  noteStates.clear(); // Clear states

  for (int i = 0; i < numNotes; i++) {
    noteColors.add(color(200)); // Reset to default color
    noteStates.add(false);      // Reset note state to off
  }

  gradientcount = 0;  // Reset gradient for color effect
  currentBeat = 0;    // Reset the current beat
  isPlaying = false;  // Stop any playback 
} //_CODE_:ClearingSong:898325:

// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  window1 = GWindow.getWindow(this, "Window title", 0, 0, 420, 200, JAVA2D);
  window1.noLoop();
  window1.setActionOnClose(G4P.KEEP_OPEN);
  window1.addDrawHandler(this, "win_draw1");
  roomList = new GDropList(window1, 20, 40, 90, 54, 2, 10);
  roomList.setItems(loadStrings("list_room"), 0);
  roomList.addEventHandler(this, "roomListClick");
  soundList = new GDropList(window1, 130, 40, 90, 90, 4, 10);
  soundList.setItems(loadStrings("soundList"), 0);
  soundList.addEventHandler(this, "soundListClick");
  RoomType = new GLabel(window1, 20, 20, 80, 20);
  RoomType.setText("Room Type");
  RoomType.setOpaque(false);
  SoundType = new GLabel(window1, 130, 20, 80, 20);
  SoundType.setText("Sound Type");
  SoundType.setOpaque(false);
  noteLength = new GDropList(window1, 240, 40, 90, 90, 4, 10);
  noteLength.setItems(loadStrings("noteLengths"), 1);
  noteLength.addEventHandler(this, "noteLengthClick");
  soundLength = new GLabel(window1, 240, 20, 90, 20);
  soundLength.setText("Sound Length");
  soundLength.setOpaque(false);
  restbutton = new GCheckbox(window1, 340, 70, 60, 20);
  restbutton.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  restbutton.setText("Rest");
  restbutton.setOpaque(false);
  restbutton.addEventHandler(this, "restclick");
  Play = new GButton(window1, 20, 140, 80, 30);
  Play.setText("Play Song");
  Play.addEventHandler(this, "PlaySound");
  TestSound = new GButton(window1, 340, 40, 50, 18);
  TestSound.setText("Test ");
  TestSound.addEventHandler(this, "TestingSound");
  SavedSong = new GButton(window1, 120, 140, 80, 30);
  SavedSong.setText("Save Song");
  SavedSong.addEventHandler(this, "SavingSong");
  LoadedSong = new GButton(window1, 220, 140, 80, 30);
  LoadedSong.setText("Load Song");
  LoadedSong.addEventHandler(this, "LoadSong");
  ClearingSong = new GButton(window1, 320, 140, 80, 30);
  ClearingSong.setText("Clear Song");
  ClearingSong.addEventHandler(this, "ClearSong");
  window1.loop();
}

// Variable declarations 
// autogenerated do not edit
GWindow window1;
GDropList roomList; 
GDropList soundList; 
GLabel RoomType; 
GLabel SoundType; 
GDropList noteLength; 
GLabel soundLength; 
GCheckbox restbutton; 
GButton Play; 
GButton TestSound; 
GButton SavedSong; 
GButton LoadedSong; 
GButton ClearingSong; 
